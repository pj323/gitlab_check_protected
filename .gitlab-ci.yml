stages:
  - fetch_repos

variables:
  GITLAB_ACCESS_TOKEN: $ACCESS_TOKEN  # Make sure this is defined in your GitLab CI/CD settings
  GITLAB_GROUP_ID: "your_group_id"    # Replace with your actual GitLab group ID

fetch_repo_details:
  stage: fetch_repos
  image: alpine:latest  # This image includes curl by default
  before_script:
    - apk update && apk add jq  # Ensure jq is installed for JSON parsing
  script:
    - |
      # Define the base URL for GitLab API
      BASE_URL="https://sfgitlab.opr.statefarm.org/api/v4"

      # Fetch all projects in the specified group
      PROJECTS_JSON=$(curl -s --header "PRIVATE-TOKEN: ${GITLAB_ACCESS_TOKEN}" "${BASE_URL}/groups/${GITLAB_GROUP_ID}/projects?include_subgroups=true")
      
      # Loop through each project
      echo "${PROJECTS_JSON}" | jq -c '.[]' | while read i; do
        PROJECT_ID=$(echo $i | jq -r '.id')
        PROJECT_NAME=$(echo $i | jq -r '.name')
        
        # Fetch branches of the project
        BRANCHES_JSON=$(curl -s --header "PRIVATE-TOKEN: ${GITLAB_ACCESS_TOKEN}" "${BASE_URL}/projects/${PROJECT_ID}/repository/branches")
        
        # Check if 'master' or 'main' is protected
        echo "${BRANCHES_JSON}" | jq -c '.[]' | while read j; do
          BRANCH_NAME=$(echo $j | jq -r '.name')
          IS_PROTECTED=$(echo $j | jq -r '.protected')
          if [[ "$BRANCH_NAME" == "master" || "$BRANCH_NAME" == "main" ]]; then
            echo "Repository: $PROJECT_NAME, Branch: $BRANCH_NAME, Protected: $IS_PROTECTED"
          fi
        done
      done
  only:
    - master  # Or adjust this to run on branches as necessary












    stages:
  - fetch_repos

variables:
  GITLAB_ACCESS_TOKEN: $ACCESS_TOKEN  # Make sure this is defined in your GitLab CI/CD settings
  GITLAB_GROUP_ID: "your_group_id"    # Replace with your actual GitLab group ID

fetch_repo_details:
  stage: fetch_repos
  image: alpine:latest  # This image includes curl by default
  before_script:
    - apk update && apk add jq curl  # Ensure jq and curl are installed
  script:
    - |
      # Initialize an empty JSON array to collect all projects
      echo "[]" > all_projects.json

      # Define the base URL for GitLab API and the page number
      BASE_URL="https://sfgitlab.opr.statefarm.org/api/v4"
      PAGE=1
      PER_PAGE=100  # Fetch 100 projects per page

      # Loop through all pages until no more projects are returned
      while :; do
        # Fetch projects from the current page, including subgroups
        PROJECTS_JSON=$(curl -s --header "PRIVATE-TOKEN: ${GITLAB_ACCESS_TOKEN}" "${BASE_URL}/groups/${GITLAB_GROUP_ID}/projects?include_subgroups=true&per_page=${PER_PAGE}&page=${PAGE}")
        
        # Break the loop if no projects are returned
        if [ -z "$(echo $PROJECTS_JSON | jq '.[]')" ]; then
          break
        fi

        # Append the projects to the all_projects.json file
        echo $(cat all_projects.json | jq ". + ${PROJECTS_JSON}") > all_projects.json

        # Increment the page number
        ((PAGE++))
      done

      # Output details for each project
      cat all_projects.json | jq -c '.[]' | while read i; do
        PROJECT_ID=$(echo $i | jq -r '.id')
        PROJECT_NAME=$(echo $i | jq -r '.name')
        
        # Fetch branches of the project
        BRANCHES_JSON=$(curl -s --header "PRIVATE-TOKEN: ${GITLAB_ACCESS_TOKEN}" "${BASE_URL}/projects/${PROJECT_ID}/repository/branches")
        
        # Check if 'master' or 'main' is protected and print details
        echo "${BRANCHES_JSON}" | jq -c '.[]' | while read j; do
          BRANCH_NAME=$(echo $j | jq -r '.name')
          IS_PROTECTED=$(echo $j | jq -r '.protected')
          if [[ "$BRANCH_NAME" == "master" || "$BRANCH_NAME" == "main" ]]; then
            echo "Repository: $PROJECT_NAME, Branch: $BRANCH_NAME, Protected: $IS_PROTECTED"
          fi
        done
      done
  artifacts:
    paths:
      - all_projects.json  # Save the projects data as an artifact
    expire_in: 1 week
  only:
    - master  # Or adjust this to run on branches as necessary

stages:
  - fetch_repos

variables:
  GITLAB_ACCESS_TOKEN: $ACCESS_TOKEN  # Make sure this is defined in your GitLab CI/CD settings
  GITLAB_GROUP_ID: "your_group_id"    # Replace with your actual GitLab group ID

fetch_repo_details:
  stage: fetch_repos
  image: alpine:latest  # This image includes curl by default
  before_script:
    - apk update && apk add jq curl  # Ensure jq and curl are installed
  script:
    - |
      # Define the base URL for GitLab API and the page number
      BASE_URL="https://sfgitlab.opr.statefarm.org/api/v4"
      PAGE=1
      PER_PAGE=100  # Fetch 100 projects per page
      echo "[]" > all_projects.json  # Initialize an empty JSON array to collect all projects

      # Loop through all pages until no more projects are returned
      while :; do
        # Fetch projects from the current page, including subgroups
        PROJECTS_JSON=$(curl -s --header "PRIVATE-TOKEN: ${GITLAB_ACCESS_TOKEN}" "${BASE_URL}/groups/${GITLAB_GROUP_ID}/projects?include_subgroups=true&per_page=${PER_PAGE}&page=${PAGE}")
        
        # Check if any projects are returned
        if [ -z "$(echo $PROJECTS_JSON | jq '.[]')" ]; then
          break  # Exit the loop if no projects
        fi

        # Process each project individually
        echo "$PROJECTS_JSON" | jq -c '.[]' | while read i; do
          PROJECT_ID=$(echo $i | jq -r '.id')
          PROJECT_NAME=$(echo $i | jq -r '.name')
          
          # Fetch and process branches of the project
          BRANCHES_JSON=$(curl -s --header "PRIVATE-TOKEN: ${GITLAB_ACCESS_TOKEN}" "${BASE_URL}/projects/${PROJECT_ID}/repository/branches")
          echo "$BRANCHES_JSON" | jq -c '.[]' | while read j; do
            BRANCH_NAME=$(echo $j | jq -r '.name')
            IS_PROTECTED=$(echo $j | jq -r '.protected')
            if [[ "$BRANCH_NAME" == "master" || "$BRANCH_NAME" == "main" ]]; then
              # Append project and branch details to the JSON array
              NEW_ENTRY="{\"project_name\": \"$PROJECT_NAME\", \"branch_name\": \"$BRANCH_NAME\", \"protected\": $IS_PROTECTED}"
              echo $(cat all_projects.json | jq ". + [$NEW_ENTRY]") > all_projects.json
            fi
          done
        done

        # Increment the page number
        ((PAGE++))
      done
  artifacts:
    paths:
      - all_projects.json  # Save the projects data as an artifact
    expire_in: 1 week
  only:
    - master  # Or adjust this to run on branches as necessary

