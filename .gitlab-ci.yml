stages:
  - fetch_repos

variables:
  GITLAB_ACCESS_TOKEN: $ACCESS_TOKEN
  GITLAB_GROUP_ID: "your_group_id"

fetch_repo_details:
  stage: fetch_repos
  image: alpine:latest
  before_script:
    - apk update && apk add jq curl
  script:
    - |
      BASE_URL="https://sfgitlab.opr.statefarm.org/api/v4"
      PAGE=1
      PER_PAGE=100
      echo "[]" > all_projects.json

      while :; do
        PROJECTS_JSON=$(curl -s --header "PRIVATE-TOKEN: ${GITLAB_ACCESS_TOKEN}" "${BASE_URL}/groups/${GITLAB_GROUP_ID}/projects?include_subgroups=true&per_page=${PER_PAGE}&page=${PAGE}")
        
        if [ -z "$(echo $PROJECTS_JSON | jq '.[]')" ]; then
          break
        fi
        
        echo "$PROJECTS_JSON" | jq -c '.[]' | while read i; do
          PROJECT_ID=$(echo $i | jq -r '.id')
          PROJECT_NAME=$(echo $i | jq -r '.name' | sed 's/\"/\\\"/g')  # Escape double quotes
          
          BRANCHES_JSON=$(curl -s --header "PRIVATE-TOKEN: ${GITLAB_ACCESS_TOKEN}" "${BASE_URL}/projects/${PROJECT_ID}/repository/branches")
          echo "$BRANCHES_JSON" | jq -c '.[]' | while read j; do
            BRANCH_NAME=$(echo $j | jq -r '.name' | sed 's/\"/\\\"/g')  # Escape double quotes
            IS_PROTECTED=$(echo $j | jq -r '.protected')
            
            if [[ "$BRANCH_NAME" == "master" || "$BRANCH_NAME" == "main" ]]; then
              NEW_ENTRY="{\"project_name\": \"$PROJECT_NAME\", \"branch_name\": \"$BRANCH_NAME\", \"protected\": $IS_PROTECTED}"
              # Validate the JSON entry before appending
              echo $NEW_ENTRY | jq . >/dev/null 2>&1
              if [ $? -eq 0 ]; then
                echo $(cat all_projects.json | jq ". + [$NEW_ENTRY]") > all_projects.json
              else
                echo "Invalid JSON entry: $NEW_ENTRY"
              fi
            fi
          done
        done
        ((PAGE++))
      done
  artifacts:
    paths:
      - all_projects.json
    expire_in: 1 week
  only:
    - master
